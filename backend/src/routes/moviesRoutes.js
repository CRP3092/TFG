import express from "express"; // Importa Express para gestionar las rutas
import db from "../config/db.js"; // Importa la configuraci√≥n de la base de datos

const router = express.Router(); // Crea una instancia de router para definir rutas

// üîπ Obtener todas las pel√≠culas desde la base de datos
router.get("/", async (req, res) => {
  try {
    // Ejecuta la consulta SQL para obtener todas las pel√≠culas y sus detalles
    const [movies] = await db.query(
      "SELECT Id_Movie, Title, Genre, Release_Year, Duration, Synopsis, Language, Image FROM movies"
    );

    res.json(movies); // Env√≠a la lista de pel√≠culas en formato JSON
  } catch (error) {
    console.error("Error al obtener pel√≠culas:", error); // Registra errores en la consola para depuraci√≥n
    res.status(500).json({ message: "Error interno del servidor." }); // Env√≠a un mensaje de error al cliente
  }
});

// üîπ Obtener detalles de una pel√≠cula espec√≠fica por su ID
router.get("/:id", async (req, res) => {
  try {
    // Ejecuta la consulta SQL para obtener la pel√≠cula con el ID especificado
    const [movie] = await db.query(
      "SELECT Id_Movie, Title, Genre, Release_Year, Duration, Synopsis, Language, Image FROM movies WHERE Id_Movie = ?",
      [req.params.id] // Obtiene el ID de la pel√≠cula desde la URL
    );

    // Si la pel√≠cula no se encuentra, devuelve un error 404
    if (!movie || movie.length === 0) {
      return res.status(404).json({ message: "Pel√≠cula no encontrada." });
    }

    res.json(movie[0]); // Retorna la pel√≠cula encontrada en formato JSON
  } catch (error) {
    console.error("Error al obtener pel√≠cula:", error); // Registra errores en la consola para depuraci√≥n
    res.status(500).json({ message: "Error interno del servidor." }); // Env√≠a un mensaje de error al cliente
  }
});

export default router; // Exporta el router para su uso en otras partes del servidor
