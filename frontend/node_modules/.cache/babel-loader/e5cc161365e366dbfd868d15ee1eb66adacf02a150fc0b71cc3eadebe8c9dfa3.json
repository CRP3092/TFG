{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\BlockBuster\\\\frontend\\\\src\\\\pages\\\\Series.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport config from \"../utils/config\";\nimport \"../styles/styles.css\";\nimport Modal from \"../components/Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Series = () => {\n  _s();\n  const [seriesList, setSeriesList] = useState([]); // Estado para almacenar series\n  const [selectedSeries, setSelectedSeries] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Obtener series desde la API\n  useEffect(() => {\n    const fetchSeries = async () => {\n      try {\n        const response = await fetch(`${config.API_URL}/api/series`);\n        const data = await response.json();\n        setSeriesList(data); // Almacena las series en el estado\n      } catch (error) {\n        console.error(\"Error al cargar las series:\", error);\n      }\n    };\n    fetchSeries();\n  }, []);\n  const handleClick = async seriesId => {\n    try {\n      const response = await fetch(`${config.API_URL}/api/series/${seriesId}`);\n      const data = await response.json();\n      setSelectedSeries(data);\n      setIsModalOpen(true);\n    } catch (error) {\n      console.error(\"Error al cargar la serie:\", error);\n    }\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedSeries(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Series\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-carousel\",\n      children: seriesList.map(series => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-card\",\n        onClick: () => handleClick(series.Id_Series),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${config.API_URL}${series.Image}`,\n          alt: series.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: series.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, series.Id_Series, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: closeModal,\n      data: selectedSeries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(Series, \"XEP9/jrM7uaF6hq8uHB1jP0jNbI=\");\n_c = Series;\nexport default Series;\nvar _c;\n$RefreshReg$(_c, \"Series\");","map":{"version":3,"names":["React","useState","useEffect","config","Modal","jsxDEV","_jsxDEV","Series","_s","seriesList","setSeriesList","selectedSeries","setSelectedSeries","isModalOpen","setIsModalOpen","fetchSeries","response","fetch","API_URL","data","json","error","console","handleClick","seriesId","closeModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","series","onClick","Id_Series","src","Image","alt","Title","isOpen","onClose","_c","$RefreshReg$"],"sources":["C:/wamp64/www/BlockBuster/frontend/src/pages/Series.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport config from \"../utils/config\";\r\nimport \"../styles/styles.css\";\r\nimport Modal from \"../components/Modal\";\r\n\r\nconst Series = () => {\r\n  const [seriesList, setSeriesList] = useState([]); // Estado para almacenar series\r\n  const [selectedSeries, setSelectedSeries] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  // Obtener series desde la API\r\n  useEffect(() => {\r\n    const fetchSeries = async () => {\r\n      try {\r\n        const response = await fetch(`${config.API_URL}/api/series`);\r\n        const data = await response.json();\r\n        setSeriesList(data); // Almacena las series en el estado\r\n      } catch (error) {\r\n        console.error(\"Error al cargar las series:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSeries();\r\n  }, []);\r\n\r\n  const handleClick = async (seriesId) => {\r\n    try {\r\n      const response = await fetch(`${config.API_URL}/api/series/${seriesId}`);\r\n      const data = await response.json();\r\n      setSelectedSeries(data);\r\n      setIsModalOpen(true);\r\n    } catch (error) {\r\n      console.error(\"Error al cargar la serie:\", error);\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setSelectedSeries(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"content-page\">\r\n      <h1>Series</h1>\r\n\r\n      <div className=\"content-carousel\">\r\n        {seriesList.map(series => (\r\n            <div key={series.Id_Series} className=\"content-card\" onClick={() => handleClick(series.Id_Series)}>\r\n            <img src={`${config.API_URL}${series.Image}`} alt={series.Title} />\r\n            <p>{series.Title}</p>\r\n            </div>\r\n        ))}\r\n      </div>\r\n\r\n\r\n      <Modal isOpen={isModalOpen} onClose={closeModal} data={selectedSeries} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Series;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}