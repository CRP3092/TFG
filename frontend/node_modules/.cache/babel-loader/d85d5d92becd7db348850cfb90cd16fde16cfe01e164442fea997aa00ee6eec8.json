{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\BlockBuster\\\\frontend\\\\src\\\\pages\\\\Index.jsx\",\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport config from \"../utils/config\";\nimport \"../styles/styles.css\";\nimport Modal from \"../components/Modal\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport { updateFavorites } from \"../utils/favorites\";\n\n/**\r\n * Componente Index\r\n * - Muestra la lista de películas y series disponibles.\r\n * - Gestiona la selección de contenido para ver detalles en un modal.\r\n * - Maneja la actualización de favoritos en `sessionStorage`.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Index = ({\n  setFavoriteMessage\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [moviesList, setMoviesList] = useState([]); // Estado para almacenar películas\n  const [seriesList, setSeriesList] = useState([]); // Estado para almacenar series\n  const [selectedItem, setSelectedItem] = useState(null); // Estado para el contenido seleccionado\n  const [isModalOpen, setIsModalOpen] = useState(false); // Estado para abrir/cerrar modal\n\n  // Asegura que el usuario tenga `Favorites` definido en `sessionStorage`\n  useEffect(() => {\n    const userStr = sessionStorage.getItem(\"user\");\n    if (userStr) {\n      const user = JSON.parse(userStr);\n      if (!user.Favorites || user.Favorites === \"undefined\") {\n        user.Favorites = \"\";\n        sessionStorage.setItem(\"user\", JSON.stringify(user));\n      }\n    }\n  }, []);\n\n  // Obtiene la lista de películas desde la API\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch(`${config.API_URL}/api/movies`);\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n        const data = await response.json();\n        setMoviesList(data);\n      } catch (error) {\n        console.error(\"Error al cargar películas:\", error);\n      }\n    };\n    const fetchSeries = async () => {\n      try {\n        const response = await fetch(`${config.API_URL}/api/series`);\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n        const data = await response.json();\n        setSeriesList(data);\n      } catch (error) {\n        console.error(\"Error al cargar series:\", error);\n      }\n    };\n    fetchMovies();\n    fetchSeries();\n  }, []);\n\n  // Maneja la apertura del modal con los detalles de un contenido\n  const handleClick = async (id, type) => {\n    try {\n      const response = await fetch(`${config.API_URL}/api/${type}/${id}`);\n      const data = await response.json();\n      setSelectedItem({\n        ...data,\n        type\n      });\n      setIsModalOpen(true);\n    } catch (error) {\n      console.error(`Error al cargar ${type}:`, error);\n    }\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedItem(null);\n  };\n\n  /**\r\n   * Componente ContentCard\r\n   * - Representa una tarjeta para cada contenido (película o serie).\r\n   * - Permite marcar como favorito y visualizar detalles en el modal.\r\n   */\n  const ContentCard = ({\n    item,\n    type\n  }) => {\n    _s();\n    const [isFavorite, setIsFavorite] = useState(false);\n    const [message, setMessage] = useState(\"\");\n    const favoriteKey = String(item.Id_Movie || item.Id_Series); // Determina el identificador correcto\n\n    // Actualiza el estado de favoritos al montar\n    useEffect(() => {\n      const userStr = sessionStorage.getItem(\"user\");\n      if (userStr) {\n        const user = JSON.parse(userStr);\n        const favs = (user.Favorites || \"\").split(\",\").map(fav => fav.trim()).filter(fav => fav !== \"\");\n        setIsFavorite(favs.includes(favoriteKey));\n      }\n    }, [favoriteKey]);\n\n    // Escucha el evento global \"favoritesUpdated\" para refrescar el estado\n    useEffect(() => {\n      window.addEventListener(\"favoritesUpdated\", () => {\n        const userStr = sessionStorage.getItem(\"user\");\n        if (userStr) {\n          const user = JSON.parse(userStr);\n          const favs = (user.Favorites || \"\").split(\",\").map(fav => fav.trim()).filter(fav => fav !== \"\");\n          setIsFavorite(favs.includes(favoriteKey));\n        }\n      });\n      return () => {\n        window.removeEventListener(\"favoritesUpdated\", updateFavoriteState);\n      };\n    }, [favoriteKey]);\n\n    // Maneja la actualización de favoritos\n    const handleFavoriteClick = async e => {\n      e.stopPropagation();\n      const newFavState = !isFavorite;\n      setIsFavorite(newFavState);\n      setFavoriteMessage(newFavState ? \"Añadido a favoritos\" : \"Eliminado de favoritos\");\n      setTimeout(() => setFavoriteMessage(\"\"), 2000);\n      setMessage(newFavState ? \"Añadido a favoritos\" : \"Eliminado de favoritos\");\n      setTimeout(() => setMessage(\"\"), 2000);\n      const success = await updateFavorites(favoriteKey, newFavState);\n      if (!success) {\n        console.error(\"Error actualizando favoritos.\");\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-card\",\n      onClick: () => handleClick(favoriteKey, type),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-image-container\",\n        style: {\n          position: \"relative\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${config.API_URL}${item.Image}`,\n          alt: item.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"favorite-icon\",\n          onClick: e => handleFavoriteClick(e),\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: `fa ${isFavorite ? \"fa-star\" : \"fa-star-o\"}`,\n            style: {\n              fontSize: \"24px\",\n              color: \"gold\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: \"absolute\",\n              top: \"0\",\n              left: \"40px\",\n              background: \"rgba(0,0,0,0.7)\",\n              padding: \"3px 8px\",\n              borderRadius: \"5px\",\n              color: \"white\",\n              fontSize: \"14px\"\n            },\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  };\n  _s(ContentCard, \"lRq9mzHkmJVd89Dz61fQo/fr8NU=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"index-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bienvenido a Blockbuster\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Explora nuestras series y pel\\xEDculas.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Series Populares\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-carousel\",\n        children: seriesList.map(series => /*#__PURE__*/_jsxDEV(ContentCard, {\n          item: series,\n          type: \"series\"\n        }, series.Id_Series, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Pel\\xEDculas Destacadas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-carousel\",\n        children: moviesList.map(movie => /*#__PURE__*/_jsxDEV(ContentCard, {\n          item: movie,\n          type: \"movies\"\n        }, movie.Id_Movie, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: closeModal,\n      data: selectedItem,\n      setFavoriteMessage: setFavoriteMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s2(Index, \"ejfCOR0FRrmgRyszSw+4uApDWzQ=\");\n_c = Index;\nexport default Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"names":["useState","useEffect","config","Modal","updateFavorites","jsxDEV","_jsxDEV","Index","setFavoriteMessage","_s2","_s","$RefreshSig$","moviesList","setMoviesList","seriesList","setSeriesList","selectedItem","setSelectedItem","isModalOpen","setIsModalOpen","userStr","sessionStorage","getItem","user","JSON","parse","Favorites","setItem","stringify","fetchMovies","response","fetch","API_URL","ok","Error","status","data","json","error","console","fetchSeries","handleClick","id","type","closeModal","ContentCard","item","isFavorite","setIsFavorite","message","setMessage","favoriteKey","String","Id_Movie","Id_Series","favs","split","map","fav","trim","filter","includes","window","addEventListener","removeEventListener","updateFavoriteState","handleFavoriteClick","e","stopPropagation","newFavState","setTimeout","success","className","onClick","children","style","position","src","Image","alt","Title","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","color","top","left","background","padding","borderRadius","series","movie","isOpen","onClose","_c","$RefreshReg$"],"sources":["C:/wamp64/www/BlockBuster/frontend/src/pages/Index.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport config from \"../utils/config\";\r\nimport \"../styles/styles.css\";\r\nimport Modal from \"../components/Modal\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport { updateFavorites } from \"../utils/favorites\";\r\n\r\n/**\r\n * Componente Index\r\n * - Muestra la lista de películas y series disponibles.\r\n * - Gestiona la selección de contenido para ver detalles en un modal.\r\n * - Maneja la actualización de favoritos en `sessionStorage`.\r\n */\r\nconst Index = ({ setFavoriteMessage }) => {\r\n  const [moviesList, setMoviesList] = useState([]); // Estado para almacenar películas\r\n  const [seriesList, setSeriesList] = useState([]); // Estado para almacenar series\r\n  const [selectedItem, setSelectedItem] = useState(null); // Estado para el contenido seleccionado\r\n  const [isModalOpen, setIsModalOpen] = useState(false); // Estado para abrir/cerrar modal\r\n\r\n  // Asegura que el usuario tenga `Favorites` definido en `sessionStorage`\r\n  useEffect(() => {\r\n    const userStr = sessionStorage.getItem(\"user\");\r\n    if (userStr) {\r\n      const user = JSON.parse(userStr);\r\n      if (!user.Favorites || user.Favorites === \"undefined\") {\r\n        user.Favorites = \"\";\r\n        sessionStorage.setItem(\"user\", JSON.stringify(user));\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Obtiene la lista de películas desde la API\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      try {\r\n        const response = await fetch(`${config.API_URL}/api/movies`);\r\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\r\n        const data = await response.json();\r\n        setMoviesList(data);\r\n      } catch (error) {\r\n        console.error(\"Error al cargar películas:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchSeries = async () => {\r\n      try {\r\n        const response = await fetch(`${config.API_URL}/api/series`);\r\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\r\n        const data = await response.json();\r\n        setSeriesList(data);\r\n      } catch (error) {\r\n        console.error(\"Error al cargar series:\", error);\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n    fetchSeries();\r\n  }, []);\r\n\r\n  // Maneja la apertura del modal con los detalles de un contenido\r\n  const handleClick = async (id, type) => {\r\n    try {\r\n      const response = await fetch(`${config.API_URL}/api/${type}/${id}`);\r\n      const data = await response.json();\r\n      setSelectedItem({ ...data, type });\r\n      setIsModalOpen(true);\r\n    } catch (error) {\r\n      console.error(`Error al cargar ${type}:`, error);\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setSelectedItem(null);\r\n  };\r\n\r\n  /**\r\n   * Componente ContentCard\r\n   * - Representa una tarjeta para cada contenido (película o serie).\r\n   * - Permite marcar como favorito y visualizar detalles en el modal.\r\n   */\r\n  const ContentCard = ({ item, type }) => {\r\n    const [isFavorite, setIsFavorite] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    const favoriteKey = String(item.Id_Movie || item.Id_Series); // Determina el identificador correcto\r\n\r\n    // Actualiza el estado de favoritos al montar\r\n    useEffect(() => {\r\n      const userStr = sessionStorage.getItem(\"user\");\r\n      if (userStr) {\r\n        const user = JSON.parse(userStr);\r\n        const favs = (user.Favorites || \"\")\r\n          .split(\",\")\r\n          .map(fav => fav.trim())\r\n          .filter(fav => fav !== \"\");\r\n        setIsFavorite(favs.includes(favoriteKey));\r\n      }\r\n    }, [favoriteKey]);\r\n\r\n    // Escucha el evento global \"favoritesUpdated\" para refrescar el estado\r\n    useEffect(() => {\r\n      window.addEventListener(\"favoritesUpdated\", () => {\r\n        const userStr = sessionStorage.getItem(\"user\");\r\n        if (userStr) {\r\n          const user = JSON.parse(userStr);\r\n          const favs = (user.Favorites || \"\")\r\n            .split(\",\")\r\n            .map(fav => fav.trim())\r\n            .filter(fav => fav !== \"\");\r\n          setIsFavorite(favs.includes(favoriteKey));\r\n        }\r\n      });\r\n      return () => {\r\n        window.removeEventListener(\"favoritesUpdated\", updateFavoriteState);\r\n      };\r\n    }, [favoriteKey]);\r\n\r\n    // Maneja la actualización de favoritos\r\n    const handleFavoriteClick = async (e) => {\r\n      e.stopPropagation();\r\n      const newFavState = !isFavorite;\r\n      setIsFavorite(newFavState);\r\n      setFavoriteMessage(newFavState ? \"Añadido a favoritos\" : \"Eliminado de favoritos\");\r\n      setTimeout(() => setFavoriteMessage(\"\"), 2000);\r\n      setMessage(newFavState ? \"Añadido a favoritos\" : \"Eliminado de favoritos\");\r\n      setTimeout(() => setMessage(\"\"), 2000);\r\n\r\n      const success = await updateFavorites(favoriteKey, newFavState);\r\n      if (!success) {\r\n        console.error(\"Error actualizando favoritos.\");\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className=\"content-card\" onClick={() => handleClick(favoriteKey, type)}>\r\n        <div className=\"card-image-container\" style={{ position: \"relative\" }}>\r\n          <img src={`${config.API_URL}${item.Image}`} alt={item.Title} />\r\n          <div className=\"favorite-icon\" onClick={(e) => handleFavoriteClick(e)}>\r\n            <i className={`fa ${isFavorite ? \"fa-star\" : \"fa-star-o\"}`} style={{ fontSize: \"24px\", color: \"gold\" }} />\r\n            {message && (\r\n              <div style={{ position: \"absolute\", top: \"0\", left: \"40px\", background: \"rgba(0,0,0,0.7)\", padding: \"3px 8px\", borderRadius: \"5px\", color: \"white\", fontSize: \"14px\" }}>\r\n                {message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <p>{item.Title}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"index-container\">\r\n      <h1>Bienvenido a Blockbuster</h1>\r\n      <p>Explora nuestras series y películas.</p>\r\n\r\n      <div className=\"content-section\">\r\n        <h2>Series Populares</h2>\r\n        <div className=\"content-carousel\">\r\n          {seriesList.map((series) => (\r\n            <ContentCard key={series.Id_Series} item={series} type=\"series\" />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"content-section\">\r\n        <h2>Películas Destacadas</h2>\r\n        <div className=\"content-carousel\">\r\n          {moviesList.map((movie) => (\r\n            <ContentCard key={movie.Id_Movie} item={movie} type=\"movies\" />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <Modal isOpen={isModalOpen} onClose={closeModal} data={selectedItem} setFavoriteMessage={setFavoriteMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}