{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\BlockBuster\\\\frontend\\\\src\\\\pages\\\\Series.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport config from \"../utils/config\";\nimport \"../styles/styles.css\";\nimport Modal from \"../components/Modal\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Series = ({\n  setFavoriteMessage\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [seriesList, setSeriesList] = useState([]); // Arreglo de series\n  const [selectedSeries, setSelectedSeries] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Cargar la lista de series desde la API\n  useEffect(() => {\n    const fetchSeries = async () => {\n      try {\n        const response = await fetch(`${config.API_URL}/api/series`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        setSeriesList(data);\n      } catch (error) {\n        console.error(\"❌ Error al cargar las series:\", error);\n      }\n    };\n    fetchSeries();\n  }, []);\n\n  // Abre el modal con detalle de la serie\n  const handleClick = async seriesId => {\n    try {\n      const response = await fetch(`${config.API_URL}/api/series/${seriesId}`);\n      const data = await response.json();\n      setSelectedSeries({\n        ...data,\n        type: \"series\"\n      });\n      setIsModalOpen(true);\n    } catch (error) {\n      console.error(\"❌ Error al cargar la serie:\", error);\n    }\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedSeries(null);\n  };\n\n  // Componente para cada tarjeta de serie\n  const ContentCard = ({\n    item\n  }) => {\n    _s();\n    const favoriteKey = String(item.Id_Series);\n    const [isFavorite, setIsFavorite] = useState(false);\n    const [message, setMessage] = useState(\"\");\n    useEffect(() => {\n      const userStr = sessionStorage.getItem(\"user\");\n      if (userStr) {\n        const user = JSON.parse(userStr);\n        const favs = user.Favorites ? user.Favorites.split(\",\").map(f => f.trim()) : [];\n        setIsFavorite(favs.includes(favoriteKey));\n      }\n    }, [item, favoriteKey]);\n    const handleFavoriteClick = async e => {\n      e.stopPropagation();\n      const newFavState = !isFavorite;\n      setIsFavorite(newFavState);\n\n      // Mensaje para el usuario\n      setFavoriteMessage(newFavState ? \"Añadido a favoritos\" : \"Eliminado de favoritos\");\n      setTimeout(() => setFavoriteMessage(\"\"), 2000);\n      setMessage(newFavState ? \"Añadido a favoritos\" : \"Eliminado de favoritos\");\n      setTimeout(() => setMessage(\"\"), 2000);\n\n      // Actualizar sessionStorage (limpiando posibles \"undefined\")\n      const userStr = sessionStorage.getItem(\"user\");\n      if (userStr) {\n        const user = JSON.parse(userStr);\n        if (!user.Favorites || user.Favorites === \"undefined\") {\n          user.Favorites = \"\";\n        }\n        let favs = user.Favorites ? user.Favorites.split(\",\").map(f => f.trim()).filter(f => f !== \"\" && f !== \"undefined\") : [];\n        if (newFavState) {\n          if (!favs.includes(favoriteKey)) {\n            favs.push(favoriteKey);\n          }\n        } else {\n          favs = favs.filter(f => f !== favoriteKey);\n        }\n        user.Favorites = favs.join(\",\");\n        sessionStorage.setItem(\"user\", JSON.stringify(user));\n        console.log(\"📌 Después de modificar favoritos:\", JSON.parse(sessionStorage.getItem(\"user\")));\n      }\n\n      // Enviar la actualización al backend usando Id_User y la propiedad itemKey\n      try {\n        const userObj = JSON.parse(sessionStorage.getItem(\"user\"));\n        const requestBody = {\n          userId: userObj.Id_User,\n          // Se usa Id_User\n          itemKey: favoriteKey,\n          // Se envía como itemKey, lo que espera el backend\n          isFavorite: newFavState\n        };\n        console.log(\"📤 Datos enviados al backend:\", requestBody);\n        const response = await fetch(`${config.API_URL}/api/usuario/favorites`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          throw new Error(`Error actualizando favoritos (Código: ${response.status})`);\n        }\n        const responseData = await response.json();\n        console.log(\"✅ Respuesta del backend:\", responseData);\n\n        // Recargar usuario desde el backend para sincronizar sessionStorage\n        const updatedUserResponse = await fetch(`${config.API_URL}/api/usuario/${userObj.Id_User}`);\n        if (updatedUserResponse.ok) {\n          const updatedUserData = await updatedUserResponse.json();\n          sessionStorage.setItem(\"user\", JSON.stringify(updatedUserData));\n          console.log(\"🔄 sessionStorage actualizado después del PUT:\", updatedUserData);\n          // Disparar evento para que otros componentes se actualicen\n          window.dispatchEvent(new CustomEvent(\"favoritesUpdated\"));\n        } else {\n          console.error(\"❌ Error recargando usuario desde el backend\");\n        }\n      } catch (error) {\n        console.error(\"❌ Error actualizando favoritos:\", error);\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-card\",\n      onClick: () => handleClick(item.Id_Series),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-image-container\",\n        style: {\n          position: \"relative\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${config.API_URL}${item.Image}`,\n          alt: item.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"favorite-icon\",\n          onClick: handleFavoriteClick,\n          style: {\n            position: \"absolute\",\n            top: \"10px\",\n            left: \"10px\",\n            cursor: \"pointer\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: `fa ${isFavorite ? \"fa-star\" : \"fa-star-o\"}`,\n            style: {\n              fontSize: \"24px\",\n              color: \"gold\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: \"absolute\",\n              top: \"0\",\n              left: \"40px\",\n              background: \"rgba(0,0,0,0.7)\",\n              padding: \"3px 8px\",\n              borderRadius: \"5px\",\n              color: \"white\",\n              fontSize: \"14px\"\n            },\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  };\n  _s(ContentCard, \"g26eIYp9P9II3H7vq3EXOhzky4g=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Series\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-carousel\",\n      children: seriesList.map(series => /*#__PURE__*/_jsxDEV(ContentCard, {\n        item: series\n      }, series.Id_Series, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: closeModal,\n      data: selectedSeries,\n      setFavoriteMessage: setFavoriteMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s2(Series, \"XEP9/jrM7uaF6hq8uHB1jP0jNbI=\");\n_c = Series;\nexport default Series;\nvar _c;\n$RefreshReg$(_c, \"Series\");","map":{"version":3,"names":["React","useState","useEffect","config","Modal","jsxDEV","_jsxDEV","Series","setFavoriteMessage","_s2","_s","$RefreshSig$","seriesList","setSeriesList","selectedSeries","setSelectedSeries","isModalOpen","setIsModalOpen","fetchSeries","response","fetch","API_URL","ok","Error","status","data","json","error","console","handleClick","seriesId","type","closeModal","ContentCard","item","favoriteKey","String","Id_Series","isFavorite","setIsFavorite","message","setMessage","userStr","sessionStorage","getItem","user","JSON","parse","favs","Favorites","split","map","f","trim","includes","handleFavoriteClick","e","stopPropagation","newFavState","setTimeout","filter","push","join","setItem","stringify","log","userObj","requestBody","userId","Id_User","itemKey","method","headers","body","responseData","updatedUserResponse","updatedUserData","window","dispatchEvent","CustomEvent","className","onClick","children","style","position","src","Image","alt","Title","fileName","_jsxFileName","lineNumber","columnNumber","top","left","cursor","fontSize","color","background","padding","borderRadius","series","isOpen","onClose","_c","$RefreshReg$"],"sources":["C:/wamp64/www/BlockBuster/frontend/src/pages/Series.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport config from \"../utils/config\";\r\nimport \"../styles/styles.css\";\r\nimport Modal from \"../components/Modal\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\n\r\nconst Series = ({ setFavoriteMessage }) => {\r\n  const [seriesList, setSeriesList] = useState([]); // Arreglo de series\r\n  const [selectedSeries, setSelectedSeries] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  // Cargar la lista de series desde la API\r\n  useEffect(() => {\r\n    const fetchSeries = async () => {\r\n      try {\r\n        const response = await fetch(`${config.API_URL}/api/series`);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setSeriesList(data);\r\n      } catch (error) {\r\n        console.error(\"❌ Error al cargar las series:\", error);\r\n      }\r\n    };\r\n    fetchSeries();\r\n  }, []);\r\n\r\n  // Abre el modal con detalle de la serie\r\n  const handleClick = async (seriesId) => {\r\n    try {\r\n      const response = await fetch(`${config.API_URL}/api/series/${seriesId}`);\r\n      const data = await response.json();\r\n      setSelectedSeries({ ...data, type: \"series\" });\r\n      setIsModalOpen(true);\r\n    } catch (error) {\r\n      console.error(\"❌ Error al cargar la serie:\", error);\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setSelectedSeries(null);\r\n  };\r\n\r\n  // Componente para cada tarjeta de serie\r\n  const ContentCard = ({ item }) => {\r\n    const favoriteKey = String(item.Id_Series);\r\n    const [isFavorite, setIsFavorite] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      const userStr = sessionStorage.getItem(\"user\");\r\n      if (userStr) {\r\n        const user = JSON.parse(userStr);\r\n        const favs = user.Favorites ? user.Favorites.split(\",\").map(f => f.trim()) : [];\r\n        setIsFavorite(favs.includes(favoriteKey));\r\n      }\r\n    }, [item, favoriteKey]);\r\n\r\n    const handleFavoriteClick = async (e) => {\r\n      e.stopPropagation();\r\n      const newFavState = !isFavorite;\r\n      setIsFavorite(newFavState);\r\n\r\n      // Mensaje para el usuario\r\n      setFavoriteMessage(newFavState ? \"Añadido a favoritos\" : \"Eliminado de favoritos\");\r\n      setTimeout(() => setFavoriteMessage(\"\"), 2000);\r\n      setMessage(newFavState ? \"Añadido a favoritos\" : \"Eliminado de favoritos\");\r\n      setTimeout(() => setMessage(\"\"), 2000);\r\n\r\n      // Actualizar sessionStorage (limpiando posibles \"undefined\")\r\n      const userStr = sessionStorage.getItem(\"user\");\r\n      if (userStr) {\r\n        const user = JSON.parse(userStr);\r\n        if (!user.Favorites || user.Favorites === \"undefined\") {\r\n          user.Favorites = \"\";\r\n        }\r\n        let favs = user.Favorites\r\n          ? user.Favorites.split(\",\").map(f => f.trim()).filter(f => f !== \"\" && f !== \"undefined\")\r\n          : [];\r\n        if (newFavState) {\r\n          if (!favs.includes(favoriteKey)) {\r\n            favs.push(favoriteKey);\r\n          }\r\n        } else {\r\n          favs = favs.filter(f => f !== favoriteKey);\r\n        }\r\n        user.Favorites = favs.join(\",\");\r\n        sessionStorage.setItem(\"user\", JSON.stringify(user));\r\n        console.log(\"📌 Después de modificar favoritos:\", JSON.parse(sessionStorage.getItem(\"user\")));\r\n      }\r\n\r\n      // Enviar la actualización al backend usando Id_User y la propiedad itemKey\r\n      try {\r\n        const userObj = JSON.parse(sessionStorage.getItem(\"user\"));\r\n        const requestBody = {\r\n          userId: userObj.Id_User,  // Se usa Id_User\r\n          itemKey: favoriteKey,     // Se envía como itemKey, lo que espera el backend\r\n          isFavorite: newFavState,\r\n        };\r\n\r\n        console.log(\"📤 Datos enviados al backend:\", requestBody);\r\n\r\n        const response = await fetch(`${config.API_URL}/api/usuario/favorites`, {\r\n          method: \"PUT\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(requestBody),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Error actualizando favoritos (Código: ${response.status})`);\r\n        }\r\n        const responseData = await response.json();\r\n        console.log(\"✅ Respuesta del backend:\", responseData);\r\n\r\n        // Recargar usuario desde el backend para sincronizar sessionStorage\r\n        const updatedUserResponse = await fetch(`${config.API_URL}/api/usuario/${userObj.Id_User}`);\r\n        if (updatedUserResponse.ok) {\r\n          const updatedUserData = await updatedUserResponse.json();\r\n          sessionStorage.setItem(\"user\", JSON.stringify(updatedUserData));\r\n          console.log(\"🔄 sessionStorage actualizado después del PUT:\", updatedUserData);\r\n          // Disparar evento para que otros componentes se actualicen\r\n          window.dispatchEvent(new CustomEvent(\"favoritesUpdated\"));\r\n        } else {\r\n          console.error(\"❌ Error recargando usuario desde el backend\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"❌ Error actualizando favoritos:\", error);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className=\"content-card\" onClick={() => handleClick(item.Id_Series)}>\r\n        <div className=\"card-image-container\" style={{ position: \"relative\" }}>\r\n          <img src={`${config.API_URL}${item.Image}`} alt={item.Title} />\r\n          <div\r\n            className=\"favorite-icon\"\r\n            onClick={handleFavoriteClick}\r\n            style={{ position: \"absolute\", top: \"10px\", left: \"10px\", cursor: \"pointer\" }}\r\n          >\r\n            <i className={`fa ${isFavorite ? \"fa-star\" : \"fa-star-o\"}`}\r\n               style={{ fontSize: \"24px\", color: \"gold\" }} />\r\n            {message && (\r\n              <div style={{\r\n                  position: \"absolute\",\r\n                  top: \"0\",\r\n                  left: \"40px\",\r\n                  background: \"rgba(0,0,0,0.7)\",\r\n                  padding: \"3px 8px\",\r\n                  borderRadius: \"5px\",\r\n                  color: \"white\",\r\n                  fontSize: \"14px\",\r\n                }}>\r\n                {message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <p>{item.Title}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"content-page\">\r\n      <h1>Series</h1>\r\n      <div className=\"content-carousel\">\r\n        {seriesList.map(series => (\r\n          <ContentCard key={series.Id_Series} item={series} />\r\n        ))}\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onClose={closeModal} data={selectedSeries} setFavoriteMessage={setFavoriteMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Series;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAO,sBAAsB;AAC7B,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAO,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAmB,CAAC,KAAK;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACzC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMgB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,MAAM,CAACkB,OAAO,aAAa,CAAC;QAC5D,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC;QAC3D;QACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCb,aAAa,CAACY,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IACDT,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMW,WAAW,GAAG,MAAOC,QAAQ,IAAK;IACtC,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,MAAM,CAACkB,OAAO,eAAeS,QAAQ,EAAE,CAAC;MACxE,MAAML,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCX,iBAAiB,CAAC;QAAE,GAAGU,IAAI;QAAEM,IAAI,EAAE;MAAS,CAAC,CAAC;MAC9Cd,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACvBf,cAAc,CAAC,KAAK,CAAC;IACrBF,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;;EAED;EACA,MAAMkB,WAAW,GAAGA,CAAC;IAAEC;EAAK,CAAC,KAAK;IAAAxB,EAAA;IAChC,MAAMyB,WAAW,GAAGC,MAAM,CAACF,IAAI,CAACG,SAAS,CAAC;IAC1C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGtC,QAAQ,CAAC,KAAK,CAAC;IACnD,MAAM,CAACuC,OAAO,EAAEC,UAAU,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;IAE1CC,SAAS,CAAC,MAAM;MACd,MAAMwC,OAAO,GAAGC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC;MAC9C,IAAIF,OAAO,EAAE;QACX,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,OAAO,CAAC;QAChC,MAAMM,IAAI,GAAGH,IAAI,CAACI,SAAS,GAAGJ,IAAI,CAACI,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE;QAC/Ed,aAAa,CAACS,IAAI,CAACM,QAAQ,CAACnB,WAAW,CAAC,CAAC;MAC3C;IACF,CAAC,EAAE,CAACD,IAAI,EAAEC,WAAW,CAAC,CAAC;IAEvB,MAAMoB,mBAAmB,GAAG,MAAOC,CAAC,IAAK;MACvCA,CAAC,CAACC,eAAe,CAAC,CAAC;MACnB,MAAMC,WAAW,GAAG,CAACpB,UAAU;MAC/BC,aAAa,CAACmB,WAAW,CAAC;;MAE1B;MACAlD,kBAAkB,CAACkD,WAAW,GAAG,qBAAqB,GAAG,wBAAwB,CAAC;MAClFC,UAAU,CAAC,MAAMnD,kBAAkB,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;MAC9CiC,UAAU,CAACiB,WAAW,GAAG,qBAAqB,GAAG,wBAAwB,CAAC;MAC1EC,UAAU,CAAC,MAAMlB,UAAU,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;;MAEtC;MACA,MAAMC,OAAO,GAAGC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC;MAC9C,IAAIF,OAAO,EAAE;QACX,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,OAAO,CAAC;QAChC,IAAI,CAACG,IAAI,CAACI,SAAS,IAAIJ,IAAI,CAACI,SAAS,KAAK,WAAW,EAAE;UACrDJ,IAAI,CAACI,SAAS,GAAG,EAAE;QACrB;QACA,IAAID,IAAI,GAAGH,IAAI,CAACI,SAAS,GACrBJ,IAAI,CAACI,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACO,MAAM,CAACR,CAAC,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,WAAW,CAAC,GACvF,EAAE;QACN,IAAIM,WAAW,EAAE;UACf,IAAI,CAACV,IAAI,CAACM,QAAQ,CAACnB,WAAW,CAAC,EAAE;YAC/Ba,IAAI,CAACa,IAAI,CAAC1B,WAAW,CAAC;UACxB;QACF,CAAC,MAAM;UACLa,IAAI,GAAGA,IAAI,CAACY,MAAM,CAACR,CAAC,IAAIA,CAAC,KAAKjB,WAAW,CAAC;QAC5C;QACAU,IAAI,CAACI,SAAS,GAAGD,IAAI,CAACc,IAAI,CAAC,GAAG,CAAC;QAC/BnB,cAAc,CAACoB,OAAO,CAAC,MAAM,EAAEjB,IAAI,CAACkB,SAAS,CAACnB,IAAI,CAAC,CAAC;QACpDjB,OAAO,CAACqC,GAAG,CAAC,oCAAoC,EAAEnB,IAAI,CAACC,KAAK,CAACJ,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;MAC/F;;MAEA;MACA,IAAI;QACF,MAAMsB,OAAO,GAAGpB,IAAI,CAACC,KAAK,CAACJ,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC1D,MAAMuB,WAAW,GAAG;UAClBC,MAAM,EAAEF,OAAO,CAACG,OAAO;UAAG;UAC1BC,OAAO,EAAEnC,WAAW;UAAM;UAC1BG,UAAU,EAAEoB;QACd,CAAC;QAED9B,OAAO,CAACqC,GAAG,CAAC,+BAA+B,EAAEE,WAAW,CAAC;QAEzD,MAAMhD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,MAAM,CAACkB,OAAO,wBAAwB,EAAE;UACtEkD,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAE3B,IAAI,CAACkB,SAAS,CAACG,WAAW;QAClC,CAAC,CAAC;QAEF,IAAI,CAAChD,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,yCAAyCJ,QAAQ,CAACK,MAAM,GAAG,CAAC;QAC9E;QACA,MAAMkD,YAAY,GAAG,MAAMvD,QAAQ,CAACO,IAAI,CAAC,CAAC;QAC1CE,OAAO,CAACqC,GAAG,CAAC,0BAA0B,EAAES,YAAY,CAAC;;QAErD;QACA,MAAMC,mBAAmB,GAAG,MAAMvD,KAAK,CAAC,GAAGjB,MAAM,CAACkB,OAAO,gBAAgB6C,OAAO,CAACG,OAAO,EAAE,CAAC;QAC3F,IAAIM,mBAAmB,CAACrD,EAAE,EAAE;UAC1B,MAAMsD,eAAe,GAAG,MAAMD,mBAAmB,CAACjD,IAAI,CAAC,CAAC;UACxDiB,cAAc,CAACoB,OAAO,CAAC,MAAM,EAAEjB,IAAI,CAACkB,SAAS,CAACY,eAAe,CAAC,CAAC;UAC/DhD,OAAO,CAACqC,GAAG,CAAC,gDAAgD,EAAEW,eAAe,CAAC;UAC9E;UACAC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,kBAAkB,CAAC,CAAC;QAC3D,CAAC,MAAM;UACLnD,OAAO,CAACD,KAAK,CAAC,6CAA6C,CAAC;QAC9D;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC;IAED,oBACErB,OAAA;MAAK0E,SAAS,EAAC,cAAc;MAACC,OAAO,EAAEA,CAAA,KAAMpD,WAAW,CAACK,IAAI,CAACG,SAAS,CAAE;MAAA6C,QAAA,gBACvE5E,OAAA;QAAK0E,SAAS,EAAC,sBAAsB;QAACG,KAAK,EAAE;UAAEC,QAAQ,EAAE;QAAW,CAAE;QAAAF,QAAA,gBACpE5E,OAAA;UAAK+E,GAAG,EAAE,GAAGlF,MAAM,CAACkB,OAAO,GAAGa,IAAI,CAACoD,KAAK,EAAG;UAACC,GAAG,EAAErD,IAAI,CAACsD;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC/DtF,OAAA;UACE0E,SAAS,EAAC,eAAe;UACzBC,OAAO,EAAE1B,mBAAoB;UAC7B4B,KAAK,EAAE;YAAEC,QAAQ,EAAE,UAAU;YAAES,GAAG,EAAE,MAAM;YAAEC,IAAI,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAU,CAAE;UAAAb,QAAA,gBAE9E5E,OAAA;YAAG0E,SAAS,EAAE,MAAM1C,UAAU,GAAG,SAAS,GAAG,WAAW,EAAG;YACxD6C,KAAK,EAAE;cAAEa,QAAQ,EAAE,MAAM;cAAEC,KAAK,EAAE;YAAO;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EAChDpD,OAAO,iBACNlC,OAAA;YAAK6E,KAAK,EAAE;cACRC,QAAQ,EAAE,UAAU;cACpBS,GAAG,EAAE,GAAG;cACRC,IAAI,EAAE,MAAM;cACZI,UAAU,EAAE,iBAAiB;cAC7BC,OAAO,EAAE,SAAS;cAClBC,YAAY,EAAE,KAAK;cACnBH,KAAK,EAAE,OAAO;cACdD,QAAQ,EAAE;YACZ,CAAE;YAAAd,QAAA,EACD1C;UAAO;YAAAiD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNtF,OAAA;QAAA4E,QAAA,EAAIhD,IAAI,CAACsD;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC;EAEV,CAAC;EAAClF,EAAA,CApHIuB,WAAW;EAsHjB,oBACE3B,OAAA;IAAK0E,SAAS,EAAC,cAAc;IAAAE,QAAA,gBAC3B5E,OAAA;MAAA4E,QAAA,EAAI;IAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACftF,OAAA;MAAK0E,SAAS,EAAC,kBAAkB;MAAAE,QAAA,EAC9BtE,UAAU,CAACuC,GAAG,CAACkD,MAAM,iBACpB/F,OAAA,CAAC2B,WAAW;QAAwBC,IAAI,EAAEmE;MAAO,GAA/BA,MAAM,CAAChE,SAAS;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CACpD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNtF,OAAA,CAACF,KAAK;MAACkG,MAAM,EAAEtF,WAAY;MAACuF,OAAO,EAAEvE,UAAW;MAACP,IAAI,EAAEX,cAAe;MAACN,kBAAkB,EAAEA;IAAmB;MAAAiF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9G,CAAC;AAEV,CAAC;AAACnF,GAAA,CAzKIF,MAAM;AAAAiG,EAAA,GAANjG,MAAM;AA2KZ,eAAeA,MAAM;AAAC,IAAAiG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}