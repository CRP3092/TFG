{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\BlockBuster\\\\frontend\\\\src\\\\pages\\\\Movies.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport config from \"../utils/config\";\nimport \"../styles/styles.css\";\nimport Modal from \"../components/Modal\";\nimport 'font-awesome/css/font-awesome.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Movies = ({\n  setFavoriteMessage\n}) => {\n  _s();\n  const [moviesList, setMoviesList] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch(`${config.API_URL}/api/movies`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        setMoviesList(data);\n      } catch (error) {\n        console.error(\"❌ Error al cargar las películas:\", error);\n      }\n    };\n    fetchMovies();\n  }, []);\n  const handleClick = async movieId => {\n    try {\n      const response = await fetch(`${config.API_URL}/api/movies/${movieId}`);\n      const data = await response.json();\n      setSelectedMovie({\n        ...data,\n        type: \"movies\"\n      });\n      setIsModalOpen(true);\n    } catch (error) {\n      console.error(\"❌ Error al cargar la película:\", error);\n    }\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedMovie(null);\n  };\n  const handleFavoriteClick = async movieId => {\n    const userStr = sessionStorage.getItem(\"user\");\n    if (!userStr) return;\n    const user = JSON.parse(userStr);\n    let favs = user.Favorites ? user.Favorites.split(\",\").map(fav => fav.trim()) : [];\n    const isFavorite = favs.includes(String(movieId));\n    const newFavState = !isFavorite;\n    setFavoriteMessage(newFavState ? \"Añadido a favoritos\" : \"Eliminado de favoritos\");\n    setTimeout(() => setFavoriteMessage(\"\"), 2000);\n    if (newFavState) {\n      favs.push(String(movieId));\n    } else {\n      favs = favs.filter(fav => fav !== String(movieId));\n    }\n    user.Favorites = favs.join(\",\");\n    sessionStorage.setItem(\"user\", JSON.stringify(user));\n    try {\n      const response = await fetch(`${config.API_URL}/api/usuario/favorites`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          itemId: String(movieId),\n          isFavorite: newFavState\n        })\n      });\n      if (!response.ok) throw new Error(\"Error actualizando favoritos\");\n      await response.json();\n    } catch (error) {\n      console.error(\"❌ Error actualizando favoritos:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pel\\xEDculas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-carousel\",\n      children: moviesList.map(movie => {\n        var _sessionStorage$getIt;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-card\",\n          onClick: () => handleClick(movie.Id_Movie),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${config.API_URL}${movie.Image}`,\n            alt: movie.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: movie.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => {\n              e.stopPropagation();\n              handleFavoriteClick(movie.Id_Movie);\n            },\n            children: (_sessionStorage$getIt = sessionStorage.getItem(\"user\")) !== null && _sessionStorage$getIt !== void 0 && _sessionStorage$getIt.Favorites.includes(String(movie.Id_Movie)) ? \"Eliminar de Favoritos\" : \"Añadir a Favoritos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, movie.Id_Movie, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: closeModal,\n      data: selectedMovie,\n      setFavoriteMessage: setFavoriteMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Movies, \"jThUFeuIv+R0vNsWSFW+d+Kz/GA=\");\n_c = Movies;\nexport default Movies;\nvar _c;\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"names":["React","useState","useEffect","config","Modal","jsxDEV","_jsxDEV","Movies","setFavoriteMessage","_s","moviesList","setMoviesList","selectedMovie","setSelectedMovie","isModalOpen","setIsModalOpen","fetchMovies","response","fetch","API_URL","ok","Error","status","data","json","error","console","handleClick","movieId","type","closeModal","handleFavoriteClick","userStr","sessionStorage","getItem","user","JSON","parse","favs","Favorites","split","map","fav","trim","isFavorite","includes","String","newFavState","setTimeout","push","filter","join","setItem","stringify","method","headers","body","userId","id","itemId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","movie","_sessionStorage$getIt","onClick","Id_Movie","src","Image","alt","Title","e","stopPropagation","isOpen","onClose","_c","$RefreshReg$"],"sources":["C:/wamp64/www/BlockBuster/frontend/src/pages/Movies.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport config from \"../utils/config\";\r\nimport \"../styles/styles.css\";\r\nimport Modal from \"../components/Modal\";\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nconst Movies = ({ setFavoriteMessage }) => {\r\n  const [moviesList, setMoviesList] = useState([]);\r\n  const [selectedMovie, setSelectedMovie] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      try {\r\n        const response = await fetch(`${config.API_URL}/api/movies`);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setMoviesList(data);\r\n      } catch (error) {\r\n        console.error(\"❌ Error al cargar las películas:\", error);\r\n      }\r\n    };\r\n    fetchMovies();\r\n  }, []);\r\n\r\n  const handleClick = async (movieId) => {\r\n    try {\r\n      const response = await fetch(`${config.API_URL}/api/movies/${movieId}`);\r\n      const data = await response.json();\r\n      setSelectedMovie({ ...data, type: \"movies\" });\r\n      setIsModalOpen(true);\r\n    } catch (error) {\r\n      console.error(\"❌ Error al cargar la película:\", error);\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setSelectedMovie(null);\r\n  };\r\n\r\n  const handleFavoriteClick = async (movieId) => {\r\n    const userStr = sessionStorage.getItem(\"user\");\r\n    if (!userStr) return;\r\n\r\n    const user = JSON.parse(userStr);\r\n    let favs = user.Favorites ? user.Favorites.split(\",\").map(fav => fav.trim()) : [];\r\n    const isFavorite = favs.includes(String(movieId));\r\n\r\n    const newFavState = !isFavorite;\r\n    setFavoriteMessage(newFavState ? \"Añadido a favoritos\" : \"Eliminado de favoritos\");\r\n    setTimeout(() => setFavoriteMessage(\"\"), 2000);\r\n\r\n    if (newFavState) {\r\n      favs.push(String(movieId));\r\n    } else {\r\n      favs = favs.filter(fav => fav !== String(movieId));\r\n    }\r\n    user.Favorites = favs.join(\",\");\r\n    sessionStorage.setItem(\"user\", JSON.stringify(user));\r\n\r\n    try {\r\n      const response = await fetch(`${config.API_URL}/api/usuario/favorites`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          userId: user.id,\r\n          itemId: String(movieId),\r\n          isFavorite: newFavState,\r\n        }),\r\n      });\r\n      if (!response.ok) throw new Error(\"Error actualizando favoritos\");\r\n      await response.json();\r\n    } catch (error) {\r\n      console.error(\"❌ Error actualizando favoritos:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"content-page\">\r\n      <h1>Películas</h1>\r\n      <div className=\"content-carousel\">\r\n        {moviesList.map(movie => (\r\n          <div key={movie.Id_Movie} className=\"content-card\" onClick={() => handleClick(movie.Id_Movie)}>\r\n            <img src={`${config.API_URL}${movie.Image}`} alt={movie.Title} />\r\n            <p>{movie.Title}</p>\r\n            <button onClick={(e) => { e.stopPropagation(); handleFavoriteClick(movie.Id_Movie); }}>\r\n              {sessionStorage.getItem(\"user\")?.Favorites.includes(String(movie.Id_Movie)) ? \"Eliminar de Favoritos\" : \"Añadir a Favoritos\"}\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <Modal isOpen={isModalOpen} onClose={closeModal} data={selectedMovie} setFavoriteMessage={setFavoriteMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}